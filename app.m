clearvars;
% close all;
clc;
    
global  Signals Power_spans_inds Td
Signals = [];
Power_spans_inds = [];
Td = [];

%--------------------------- Main figure --------------------------

global  Load_btn Load_btn_get_pos ...
        RG_ECG_axes RG_ECG_get_pos ...
        RG_ABP_axes RG_ABP_get_pos ...
        POWER_axes POWER_get_pos
    
f = figure(1); clf;
f.SizeChangedFcn = @on_main_figure_size_changed;

DX = 40;
DY = 60;

fw = f.Position(3);
fh = f.Position(4);

Load_btn_get_pos = @(fw, fh) [ ...
    DX,         fh - 40, ...
    80,  40 ...
];
Load_btn = uicontrol('Style','PushButton', ...
        'Units','pixels',...
        'String','Загрузить');
Load_btn.Position = Load_btn_get_pos(fw, fh);
Load_btn.Callback = @on_load_btn_click;


RG_ECG_get_pos = @(fw, fh) [ ...
        DX,         DY*3 + (fh - DY*4) / 3 * 2, ...
        fw - DX*2,  (fh - DY*4) / 3 ...
    ];
RG_ECG_axes = axes('Units', 'pixels',...
        'Position', RG_ECG_get_pos(fw, fh));
title('Ритмограмма ЭКГ');
xlabel('Время, с');
ylabel('Длительность, с');

RG_ABP_get_pos = @(fw, fh) [ ...
        DX,         DY*2 + (fh - DY*4) / 3 * 1, ...
        fw - DX*2,  (fh - DY*4) / 3 ...
    ];
RG_ABP_axes = axes('Units', 'pixels',...
        'Position', RG_ABP_get_pos(fw, fh));
title('Ритмограмма АД');
xlabel('Время, с');
ylabel('Длительность, с');

POWER_get_pos = @(fw, fh) [ ...
        DX,         DY*1 + (fh - DY*4) / 3 * 0, ...
        fw - DX*2,  (fh - DY*4) / 3 ...
    ];
POWER_axes = axes('Units', 'pixels',...
        'Position', POWER_get_pos(fw, fh));
POWER_axes.ButtonDownFcn = @POWER_axes_click;
title('Нагрузка');
xlabel('Время, с');
ylabel('Мощность, Вт');

%--------------------------- Additional figure --------------------------

global  RRScatter_settings RRScatter_settings_get_pos ...
        SSScatter_settings SSScatter_settings_get_pos ...
        RRpsd_axes RRpsd_axes_get_pos ...
        SSpsd_axes SSpsd_axes_get_pos ...
        RRscatter RRscatter_get_pos ...
        SSscatter SSscatter_get_pos ...
        EllipseTable EllipseTable_get_pos ...
        CPSD_axes CPSD_axes_get_pos

f2 = figure(2); clf;
f2.SizeChangedFcn = @on_additional_figure_size_changed;
SETTINGS_WIDTH = 130;

RRScatter_settings_get_pos = @(fw, fh) [ ...
        DX,             DY*3 + (fh - DY*4) / 3 * 2, ...
        SETTINGS_WIDTH,  (fh - DY*4) / 3 ...
    ];
RRScatter_settings = uipanel( ...
    'Units','pixels',...
    'Position', RRScatter_settings_get_pos(fw, fh), ...
    'BackGroundColor', [0.93 0.93 0.93]);

bg = uibuttongroup(RRScatter_settings, ...
    'Units', 'normalized', ...
    'Position', [0.05, 0.05*2+0.75/2, 0.9, 0.75/2], ...
    'SelectionChangedFcn', @bselection);
r1 = uicontrol(bg, ...
    'Style', 'radiobutton',...
    'String', '100% точек',...
    'Units', 'normalized', ...
    'Position', [0, 0, 1, 0.5],...
    'HandleVisibility', 'on');
r2 = uicontrol(bg, ...
    'Style', 'radiobutton',...
    'String', '95% точек',...
    'Units', 'normalized', ...
    'Position', [0, 0.5, 1, 0.5],...
    'HandleVisibility', 'off');

bg = uibuttongroup(RRScatter_settings, ...
    'Units', 'normalized', ...
    'Position', [0.05, 0.05, 0.9, 0.75/2], ...
    'SelectionChangedFcn', @bselection);
r1 = uicontrol(bg, ...
    'Style', 'radiobutton',...
    'String', 'Вручную',...
    'Units', 'normalized', ...
    'Position', [0, 0, 1, 0.5],...
    'HandleVisibility', 'on');
r2 = uicontrol(bg, ...
    'Style', 'radiobutton',...
    'String', 'Автоматически',...
    'Units', 'normalized', ...
    'Position', [0, 0.5, 1, 0.5],...
    'HandleVisibility', 'off');

RRscatter_get_pos = @(fw, fh) [ ...
        DX + SETTINGS_WIDTH + DX,	...
        fh - DY - (fh - DY*4)/3 ...
        (fw - DX*5)/4, ...
        (fh - DY*4)/3 ...
    ];
RRscatter = axes('Units', 'pixels',...
        'Position', RRscatter_get_pos(fw, fh));
title('Скаттерограмма ритмограммы ЭКГ');
xlabel('RR_i, мВ');
ylabel('RR_i-1, мВ');

RRpsd_axes_get_pos = @(fw, fh) [ ...
        DX + SETTINGS_WIDTH + DX + (fw - DX*5)/4 + DX,	...
        fh - DY - (fh - DY*4)/3 ...
        fw - DX*4 - (fw - DX*5)/4 - SETTINGS_WIDTH, ...
        (fh - DY*4) / 3 ...
    ];
RRpsd_axes = axes('Units', 'pixels',...
        'Position', RRpsd_axes_get_pos(fw, fh));
title('Спектр Уэлча ритмограммы ЭКГ');
xlabel('Частота, Гц');
ylabel('Оценка СПМ, мВ^2');


SSScatter_settings_get_pos = @(fw, fh) [ ...
        DX, ...
        DY*2 + (fh - DY*4) / 3 * 1, ...
        SETTINGS_WIDTH, ...
        (fh - DY*4) / 3 ...
    ];
SSScatter_settings = uipanel( ...
    'Units','pixels',...
    'Position', SSScatter_settings_get_pos(fw, fh), ...
    'BackGroundColor',[0.93 0.93 0.93]);

bg = uibuttongroup(SSScatter_settings, ...
    'Units', 'normalized', ...
    'Position', [0.05, 0.05*2+0.75/2, 0.9, 0.75/2], ...
    'SelectionChangedFcn', @bselection);
r1 = uicontrol(bg, ...
    'Style', 'radiobutton',...
    'String', '100% точек',...
    'Units', 'normalized', ...
    'Position', [0, 0, 1, 0.5],...
    'HandleVisibility', 'on');
r2 = uicontrol(bg, ...
    'Style', 'radiobutton',...
    'String', '95% точек',...
    'Units', 'normalized', ...
    'Position', [0, 0.5, 1, 0.5],...
    'HandleVisibility', 'off');

bg = uibuttongroup(SSScatter_settings, ...
    'Units', 'normalized', ...
    'Position', [0.05, 0.05, 0.9, 0.75/2], ...
    'SelectionChangedFcn', @bselection);
r1 = uicontrol(bg, ...
    'Style', 'radiobutton',...
    'String', 'Вручную',...
    'Units', 'normalized', ...
    'Position', [0, 0, 1, 0.5],...
    'HandleVisibility', 'on');
r2 = uicontrol(bg, ...
    'Style', 'radiobutton',...
    'String', 'Автоматически',...
    'Units', 'normalized', ...
    'Position', [0, 0.5, 1, 0.5],...
    'HandleVisibility', 'off');

SSscatter_get_pos = @(fw, fh) [ ...
        DX + SETTINGS_WIDTH + DX,	...
				DY*2 + (fh - DY*4)/3 * 1, ...
        (fw - DX*5)/4, ...
				(fh - DY*4) / 3 ...
    ];
SSscatter = axes('Units', 'pixels',...
        'Position', SSscatter_get_pos(fw, fh));
title('Скаттерограмма ритмограммы АД');
xlabel('SS_i, мВ');
ylabel('SS_i-1, мВ');

SSpsd_axes_get_pos = @(fw, fh) [ ...
        DX + SETTINGS_WIDTH + DX + (fw - DX*5)/4 + DX,	...
				DY*2 + (fh - DY*4) / 3 * 1, ...
        fw - DX*4 - (fw - DX*5)/4 - SETTINGS_WIDTH, ...
				(fh - DY*4) / 3 ...
    ];
SSpsd_axes = axes('Units', 'pixels',...
        'Position', SSpsd_axes_get_pos(fw, fh));
title('Спектр Уэлча ритмограммы АД');
xlabel('Частота, Гц');
ylabel('Оценка СПМ, мВ^2');


EllipseTable_get_pos = @(fw, fh) [ ...
        DX,	...
		DY*1 + (fh - DY*4) / 3 * 0, ...
        SETTINGS_WIDTH + DX + (fw - DX*5)/4, ...
		(fh - DY*4) / 3 ...
    ];
EllipseTable = uitable('Units', 'pixels',...
        'Position', EllipseTable_get_pos(fw, fh));
EllipseTable.ColumnEditable = false;
EllipseTable.ColumnName = { 'ЭКГ', 'АД' };
EllipseTable.RowName = { ...
    "Длина облака, с"; ...
    "Ширина облака, с"; ...
    "Площадь облака, с"; ...
    "Мср, с";
    "RR(SS)_min, с"; ...
    "RR(SS)_max, с"; ...
    "Размах RR(SS), с"; ...
    "Mo, с" ...
};
EllipseTable.ColumnWidth = 'fit';

CPSD_axes_get_pos = @(fw, fh) [ ...
        DX + SETTINGS_WIDTH + DX + (fw - DX*5)/4 + DX,	...
        DY*1 + (fh - DY*4) / 3 * 0, ...
        fw - DX*4 - (fw - DX*5)/4 - SETTINGS_WIDTH, ...
        (fh - DY*4) / 3 ...
    ];
CPSD_axes = axes('Units', 'pixels',...
        'Position', CPSD_axes_get_pos(fw, fh));
title('Кросс-СПМ ритмограмм АД и ЭКГ');
xlabel('Частота, Гц');
ylabel('Оценка СПМ, мВ^2');

%--------------------------- Main figure callbacks ----------------------

function on_main_figure_size_changed(s, e)
    global  Load_btn Load_btn_get_pos ...
            RG_ECG_axes RG_ECG_get_pos ...
            RG_ABP_axes RG_ABP_get_pos ...
            POWER_axes POWER_get_pos
    
    f = s;
        
    fw = f.Position(3);
    fh = f.Position(4);
    
    Load_btn.Position = Load_btn_get_pos(fw, fh);
    RG_ECG_axes.Position = RG_ECG_get_pos(fw, fh);
    RG_ABP_axes.Position = RG_ABP_get_pos(fw, fh);
    POWER_axes.Position = POWER_get_pos(fw, fh);
end

function on_load_btn_click(s, e)
    global Signals Power_spans_inds Td
    
    [filename, pathname]= uigetfile({'*.csv','CSV files (*.csv)'}, 'Выберите файл');

    if isfloat(filename) || isfloat(pathname)
        return
    end

    path = [pathname, filename];

    Signals = read_file(path);
    
    Td = (Signals.Time(2) - Signals.Time(1));
    
    Power_spans_inds = find_power_spans(Td, Signals.Power);
    
    draw_ritmograms_and_power(0);
end

function draw_ritmograms_and_power(selected_t_span_ind)
    global Signals Power_spans_inds RG_ECG_axes RG_ABP_axes POWER_axes

    [RRx, RRy, SSx, SSy] = calc_ritmogramms(Signals);

    axes(RG_ECG_axes); cla; hold on; grid on;
    stem(RRx, RRy);

    axes(RG_ABP_axes); cla; hold on; grid on;
    stem(SSx, SSy);

    axes(POWER_axes); cla reset; hold on; grid on;
    h = plot(Signals.Time, Signals.Power);
    h.HitTest = 'off';
    
    for span_ind = 1 : size(Power_spans_inds, 1)
        span_t_inds = Power_spans_inds(span_ind, :);
        t1 = Signals.Time(span_t_inds(1));
        t2 = Signals.Time(span_t_inds(2));
        
        if span_ind == selected_t_span_ind
            span_FaceColor = [1, 1, 0, 0.2];
        else
            span_FaceColor = [0, 1, 0, 0.2];
        end
        
        h = rectangle('Position', [t1, min(Signals.Power), t2 - t1, max(Signals.Power)], ...
                'Curvature', 0, ...
                'FaceColor', span_FaceColor, ...
                'EdgeColor', [0, 1, 0, 1]);
        h.HitTest = 'off';
        
        clear t1 t2 span_FaceColor
    end
    
    POWER_axes.ButtonDownFcn = @POWER_axes_click;
end

function POWER_axes_click(s, e)
    global Signals POWER_axes Power_spans_inds Td
    
    if ~exist('Signals', 'var') || isempty(Signals)
        return;
    end
    
    axes(POWER_axes);
    
    x = num2ruler(e.IntersectionPoint(1), POWER_axes.XAxis);
    
    time_ind = round(x / Td);
    
    time_span = [];
    
    for span_ind = 1 : size(Power_spans_inds, 1)
        n_begin = Power_spans_inds(span_ind, 1);
        n_end = Power_spans_inds(span_ind, 2);
        if n_begin <= time_ind && time_ind <= n_end
            time_span = [Signals.Time(n_begin), Signals.Time(n_end)];
            draw_ritmograms_and_power(span_ind);
            break;
        end
    end
    
    if isempty(time_span)
        return;
    end
    
    count_for_selected_span(time_span);
end

function count_for_selected_span(time_span)
    global  Signals ...
            RRscatter SSscatter ...
            RRpsd_axes SSpsd_axes CPSD_axes ...
            EllipseTable
    
    t = Signals.Time;
    
    t_span = t(t >= time_span(1) & t <= time_span(2));
    
    [RRx, RRy, SSx, SSy] = calc_ritmogramms(Signals, t_span);
    
    [RRpsd_f, RRpsd, SSpsd_f, SSpsd, CPSD, CPSD_f] = calc_psd_welch_an_cpsd( ...
        t_span, RRx, RRy, SSx, SSy);
    
    axes(RRpsd_axes); cla; hold on; grid on;
    plot(RRpsd_f, RRpsd);
    
    axes(SSpsd_axes); cla; hold on; grid on;
    plot(SSpsd_f, SSpsd);
    
    axes(CPSD_axes); cla; hold on; grid on;
    plot(CPSD_f, CPSD);
    
    axes(RRscatter); cla; hold on; grid on;
    [sc_x, sc_y, el_x, el_y, el_params_RR] = calc_scatter_ellipse(RRy);
    scatter(sc_x, sc_y, 'b');
    plot(el_x, el_y, 'r');
    
%     p1 = c';                         % First Point
%     p2 = c' + [V(1, 1), V(2, 1)] .* b;                         % Second Point
%     dp = p2 - p1;                         % Difference
%     quiver(p1(1),p1(2),dp(1),dp(2),0);
%     text(p2(1),p2(2), sprintf('b %f', b));
%     
%     p1 = c';                         % First Point
%     p2 = c' + [V(1, 2), V(2, 2)] .* a;                         % Second Point
%     dp = p2 - p1;                         % Difference
%     quiver(p1(1),p1(2),dp(1),dp(2),0);
%     text(p2(1),p2(2), sprintf('a %f', a));
    
    axes(SSscatter); cla; hold on; grid on;
    [sc_x, sc_y, el_x, el_y, el_params_SS] = calc_scatter_ellipse(SSy);
    scatter(sc_x, sc_y, 'b');
    plot(el_x, el_y, 'r');
    
%     p1 = c';                         % First Point
%     p2 = c' + [V(1, 1), V(2, 1)] .* b;                         % Second Point
%     dp = p2 - p1;                         % Difference
%     quiver(p1(1),p1(2),dp(1),dp(2),0);
%     text(p2(1),p2(2), sprintf('b %f', b));
%     
%     p1 = c';                         % First Point
%     p2 = c' + [V(1, 2), V(2, 2)] .* a;                         % Second Point
%     dp = p2 - p1;                         % Difference
%     quiver(p1(1),p1(2),dp(1),dp(2),0);
%     text(p2(1),p2(2), sprintf('a %f', a));
    
    EllipseTable.Data = { ...
        el_params_RR.a, 			el_params_SS.a; ...
        el_params_RR.b, 			el_params_SS.b; ...
        el_params_RR.square, 		el_params_SS.square; ...
        el_params_RR.m_sr, 			el_params_SS.m_sr; ...
        el_params_RR.interv_min, 	el_params_SS.interv_min; ...
        el_params_RR.interv_max, 	el_params_SS.interv_max; ...
        el_params_RR.interv_range, 	el_params_SS.interv_range; ...
        el_params_RR.mo, 			el_params_SS.mo; ...
    };
end

%--------------------------- Additional figure callbacks ----------------

function on_additional_figure_size_changed(s, e)
    global  RRScatter_settings RRScatter_settings_get_pos ...
            SSScatter_settings SSScatter_settings_get_pos ...
            RRpsd_axes RRpsd_axes_get_pos ...
            SSpsd_axes SSpsd_axes_get_pos ...
            RRscatter RRscatter_get_pos ...
            SSscatter SSscatter_get_pos ... 
            EllipseTable EllipseTable_get_pos ...
            CPSD_axes CPSD_axes_get_pos
    
    f = s;
        
    fw = f.Position(3);
    fh = f.Position(4);
    
    RRScatter_settings.Position = RRScatter_settings_get_pos(fw, fh);
    RRscatter.Position = RRscatter_get_pos(fw, fh);
    RRpsd_axes.Position = RRpsd_axes_get_pos(fw, fh);
    
    SSScatter_settings.Position = SSScatter_settings_get_pos(fw, fh);
    SSscatter.Position = SSscatter_get_pos(fw, fh);
    SSpsd_axes.Position = SSpsd_axes_get_pos(fw, fh);
    
    EllipseTable.Position = EllipseTable_get_pos(fw, fh);
    CPSD_axes.Position = CPSD_axes_get_pos(fw, fh);
end
